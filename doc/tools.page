<page xmlns="http://projectmallard.org/1.0/"
      id="tools"
      type="guide" style="2column">

    <info>
        <link type="guide" xref="index#core"/>
        <revision status="review" date="2017-03-27"/>
        <desc>Tools applied to models</desc>
    </info>

    <title>Tools</title>

    <p>Tools correspond to actions that can be performed on logical models.</p>

    <note style="warning">
    <p>Support for tools is currently in flux: the API will change before more tools are added.</p>
    </note>

    <section id="cli">
        <title>Command line use</title>
        <p>A tool can be specified at the end of the <link xref="cli">command line</link>
           using the <cmd>-r toolName [parameters]</cmd> switch.
        </p>
        
        <p>For example, the following command will show the stable states for a model:</p>
        <code>java -jar bioLQM.jar model.sbml -r stable</code>
        
        <p>all arguments following the name of the selected tool are considered as tool parameters.
        See the documentation of specific tools for available arguments.
        </p>
    </section>

    <section id="script">
        <title>Scripting</title>
        <p>In scripts, tools are available through the <code>lqm.getTool(name)</code> method.
           The returned object provides at least the <code>run(model)</code> method.
        </p>

<code>
model = lqm.load("model.sbml")
lqm.getTool("stable").run(model)
</code>

    </section>


    <section id="api">
        <title>Java API</title>
        <p>Tools, like other services, are available by name or by type from static methods in the
        <link href="../apidocs/index.html?org/colomoto/biolqm/LQMServiceManager.html">LQMServiceManager</link> class.
        Currently, all tool services have a <code>run(LogicalModel model)</code> method, this minimalistic API will
        be extended in the future.
        </p>

<code>
LogicalModel model = LQMLauncher.loadModel("model.xml", "sbml");
StableStateTool stableService = LQMServiceManager.getTool(StableStateTool.class);
stableService.run(model);
</code>
    </section>


    <section id="implementation">
        <title>Implementation</title>
        <p>
        Tool services implement the <link href="../apidocs/index.html?org/colomoto/biolqm/tool/LogicalModelTool.html">LogicalModelTool</link> interface,
        and are accessible throught a dedicated <link href="../apidocs/index.html?org/colomoto/biolqm/modifier/ModelModifierService.html">ModelModifierService</link>.
        Services are discovered by using the <code>@ProviderFor(LogicalModelTool.class)</code> decorator.
        </p>
    </section>

    <section id="list">
        <title>Available Tools</title>
        <links type="topic" style="2column"/>
    </section>

</page>

